/**
 * This build script will create an ipa from an xcode project or workspace and upload it to Hockey App.
 * To add to a project copy it to the root of the project and modify the projectName in the "ext" block.
 * The other variables in the ext block may also be modified if necessary.
 *
 * To allow the build script to run without having gradle installed run "$ gradle wrapper" after copying this
 * build script and commit the files generated by this task (you will need to have gradle installed if
 * you are the one doing this). Subsequent builds can be performed using ./gradlew instead of gradle.
 */
import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.Method.*
import static groovyx.net.http.ContentType.*
import org.apache.http.entity.mime.MultipartEntity
import org.apache.http.entity.mime.content.FileBody
import org.apache.http.entity.mime.content.StringBody

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath "org.codehaus.groovy.modules.http-builder:http-builder:0.7.2"
    classpath 'org.apache.httpcomponents:httpmime:4.4.1'
  }
}

ext {
  projectName = System.env["IOS_PROJECT_NAME"]

  scheme = projectName
  projectPath = "${projectName}.xcodeproj"
  workspacePath = "${projectName}.xcworkspace"

  if (System.env["IOS_BUILD_DIR"])
    buildDir = System.env["IOS_BUILD_DIR"]
  else
    buildDir = "build"

	codeSigningId = System.env["IOS_CODE_SIGN_IDENTITY"]
  provisioningProfileName = System.env["IOS_PROVISIONING_PROFILE_NAME"]

  hockeyAppApiToken = System.env["HOCKEYAPP_API_TOKEN"]
}

task checkProject << {
  if (!file(workspacePath).exists() && !file(projectPath).exists()) {
    throw new GradleException("No project or workspace found for project ${projectName}. Is the project name correct?")
  }
}

task info << {
  println(codeSigningId) 
}

task installPods(type:Exec) {
  commandLine 'pod', 'install'
  enabled = file('Podfile').exists() && !file('Pods').exists()
  outputs.dir('Pods')
  outputs.file('Podfile.lock')
}

task archive(type:Exec, dependsOn: [checkProject, installPods]) {
  executable  "xcodebuild"
  args "archive", 
      "-archivePath",  "$buildDir/${projectName}.xcarchive", 
       "-scheme",  scheme, "-sdk", "iphoneos", 
       "CODE_SIGN_IDENTITY=$codeSigningId"
  if (workspacePath && file(workspacePath).directory) {
    args "-workspace",  workspacePath
  } else {
    args "-project",  projectPath
  }
  outputs.dir("$buildDir/${projectName}.xcarchive")
}

task clean << {
  delete buildDir
}

task ipa(type:Exec, dependsOn: archive) {
  executable "xcodebuild"
  args "-exportArchive", "-exportFormat", "ipa", 
       "-archivePath", "$buildDir/${projectName}.xcarchive",
       "-exportPath", "$buildDir/${projectName}",
       "-exportProvisioningProfile", provisioningProfileName
  outputs.file("$buildDir/${projectName}.ipa")
}


task hockeyUp(dependsOn: ipa) << {
  def ipaFile = file("$buildDir/${projectName}.ipa")

  def http = new HTTPBuilder('https://rink.hockeyapp.net')

  http.request(POST, JSON) { req -> 
    requestContentType = 'multipart/form-data'

    uri.path = '/api/2/apps/upload'
    headers.'X-HockeyAppToken' = hockeyAppApiToken

    MultipartEntity content = new MultipartEntity()
    content.addPart('status', new StringBody('2'))
    content.addPart('notify', new StringBody('0'))

    if (project.hasProperty('teamcity')) {

      logger.info('Build is running on TeamCity')
      logger.info("""
      build.number=${teamcity['build.number']}
      build.vcs.number=${teamcity['build.vcs.number']}
      teamcity.serverUrl=${teamcity['teamcity.serverUrl']}
      teamcity.build.id=${teamcity['teamcity.build.id']}
      vcsroot.url=${teamcity['vcsroot.url']}
      """)

      content.addPart('notes', new StringBody(
        """TeamCity Build
        Project: ${teamcity['teamcity.projectName']}
        Build Configuration: ${teamcity['teamcity.buildConfName']}
        Build #${teamcity['build.number']}
        """
      ))
      content.addPart('commit_sha', new StringBody(teamcity['build.vcs.number']))

      // The following properties are available as configuration properties but
      // need to be added to the System properties on TeamCity for them to be
      // available in this build script.
      if (teamcity.hasProperty('teamcity.serverUrl') && teamcity.hasProperty('teamcity.build.id')) {
        content.addPart('build_server', new StringBody("${teamcity['teamcity.serverUrl']}/viewLog.html?buildId=${teamcity['teamcity.build.id']}"))
      }
      if (teamcity.hasProperty('repository_url')) {
        content.addPart('repository_url', new StringBody(teamcity['vcsroot.url']))
      }
    } else {
      content.addPart('notes', new StringBody("Gradle build by ${System.getProperty('user.name')}@${java.net.InetAddress.getLocalHost().getHostName()}"))
    }
    content.addPart('ipa', new FileBody(ipaFile))

    req.setEntity(content)

    response.success =  { resp -> 
      assert resp.statusLine.statusCode == 201 || resp.statusLine.statusCode == 200
    }
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.8'
}
